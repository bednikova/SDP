Задача 2.

В тази задача трябва да реализирате функции работещи с двоично наредено дърво (BST).

Сами изберете начина за представяне на дървото.

Функциите, които трябва да реализирате са изброени по-долу. 
Сами изберете какви аргументи да им подадете, според това какво представяне на дървото сте избрали.

bool IsBst(<аргументи>)
Проверява дали дадено двоично дърво е BST.

bool IsFull(<аргументи>)
Проверява дали двоично дърво е пълно (има максимален брой елементи на всяко ниво).

bool ReduceToBst(<аргументи>)
Получава произволно двоично дърво, което може и да не е BST. Функцията премахва от него, 
всички елементи, които развалят наредбата. 
Ако два елемента в дървото не са в правилна наредба един спрямо друг да се премахва този, 
който е по-високо в дървото (по-близо до корена). Ако такъв елемент има два наследника,
 заменете го с максималния елемент на неговото ляво поддърво.

Възможно е да реализирате обхождането на дървото както с рекурсия, така и със стек. 
Във втория случай се позволява да използвате класа std::stack от STL.