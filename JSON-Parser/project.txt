JSON Parser
JSON е популярен текстов формат за описване на данни. 
Вашата задача е да направите програма, която работи с файлове в такъв формат. 
От тази програма ще се очакват следните функционалности:
Валидация. При подаване на даден файл, вашата програма трябва да го прочете и 
да провери дали той е валиден спрямо синтаксиса на JSON. Ако има някакъв 
проблем тя трябва да съобщи максимално ясно какво и къде не е наред, така че потребителят да може да го поправи.
Четене. При подаване на валиден JSON файл вашата програма трябва да го прочете
и съхрани в подходящо подбрана от вас структура в паметта, която представя JSON обекта.
С получения обект трябва да може да се изпълняват следните операции:
Извеждане на екрана. При подаване на подходяща команда програмата трябва да изведе на екрана съдържанието на обекта.
Търсене по ключ. При подаване на подходяща команда, следвана от стрингов ключ 
вашата програма трябва да провери дали в обекта се съдържат данни, записани под този ключ и ако 
да -- да създаде масив от всички такива данни. Всяка от тях да бъде представена като JSON обект. 
При по-късно поискване този масив трябва да позволява извеждане на екрана или запис във файл, 
както на целия масив, така и на отделен негов елемент по индекс.
Промяна на обект. При подаване на пълен път към даден елемент и символен низ T, 
вашата програма трябва да провери дали T е валиден JSON и ако това е така, да замени стойността 
на посочения елемент с парснатата според синтаксиса на JSON стойност на низа T. В противен случай трябва 
да се обяви каква е грешката.
Създаване на обект. При подаване на пълен път към даден елемент и символен низ T, 
вашата програма трябва да добави такъв елемент и да му присвои парснатата според синтаксиса 
на JSON стойност на низа T. Ако такъв елемент вече съществува трябва да се обяви това като проблем. 
Иначе той трябва да се добави, евентуално с рекурсивно създаване на целия път. 
Ако символният низ не е коректен да се съобщи с подходящо описание на грешката.
Изтриване на елемент. При подаване на пълен път до елемент, той трябва да се изтри. 
Ако такъв елемент не съществува, да се изведе съобщение.
Преместване. При подаване на два пътя, всички елементи, намиращи се на първия път да бъдат преместени на втория.
Подреждане. По зададен път до елемент и име на ключ, ако елементът е масив, елементите му да бъдат подредени 
според стойностите на дадения ключ, ако това е възможно (има такъв ключ и стойностите му са скаларни). 
В противен случай, 
проблемът да бъде съобщен на потребителя по подходящ начин.
За бонус точки: Създаване на индекс по даден ключ. Да се създаде индекс по даден ключ, 
който да се използва при търсенето по този ключ (точка b).
Записване във файл.
Цял обект. При поискване наличният в паметта обект да бъде записан в JSON файл с подадено от потребителя име. 
Ако такъв файл съществува да се даде избор на потребителя да смени името или да презапише съществуващия файл. 
Да се подава допълнителен параметър, който да определя дали извеждането да бъде подравнено с отмествания и 
нови редове, с цел по-добра четивност или да бъде с минимален обем (без излишни празни позиции).
Извадка от обект. При подаден път или ключ, заедно с име на файл да се запише в този файл елементът намиращ 
се на дадения път, ако такъв съществува или масив от всички елементи с даден ключ. Ако съответното съдържание 
не съществува да се съобщи на потребителя. Ако такъв файл вече съществува да се даде възможност на потребителя 
да избере дали да смени името или да го презапише. Да се подава допълнителен параметър, който да определя дали 
извеждането да бъде подравнено с отмествания и нови редове, с цел по-добра четивност или да бъде с минимален обем 
(без излишни празни позиции).
Реализирайте конзолен интерфейс за работа с вашата програма, като сами изберете как да изглеждат командите.
